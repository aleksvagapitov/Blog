[{"categories":null,"content":" Restaurant Reservation Service Website Activities Social Network Github    Website Trip Planner and Recorder Github    Website ","date":"2020-05-26","objectID":"/jp/portfolio/:0:0","tags":null,"title":"Portfolio","uri":"/jp/portfolio/"},{"categories":["チュートリアル"],"content":"動的テーブルの実装 \nASP.NET Coreと\nEntityFrameworkコアとページネーション\n","date":"2019-10-09","objectID":"/jp/2019/10/dotnet-tabulator-pagination-with-filtering-and-sorting/","tags":["ASP.NET","EntityFramework","Javascript"],"title":"ページネーション、フィルタリング、ソートを備えた動的テーブルを作成するためのタブレータを備えたASP.NET Core","uri":"/jp/2019/10/dotnet-tabulator-pagination-with-filtering-and-sorting/"},{"categories":["チュートリアル"],"content":" これが、この記事で私たちが作っているものだ。 Tabulatorは、データ駆動型テーブルを作成するためのJavascriptフレームワークで、ソート、フィルタリング、エクスポート、その他多くの素晴らしい機能など、サーバーサイドにもフロントエンドにも多くの機能を提供しています。以下のようなツールを使ってきました： Handsontable、Datatables、そしてカスタムのRazor Pagesのようなツールを使ってきましたが、Tabulatorを試してみることにしました。そして、私が望むすべての機能を無料で提供し、柔軟性に富み、比較的少ないフロントエンドのコードで済む最適なソリューションであることがわかりました。この記事では、この素晴らしいJavascriptフレームワークがASP.NET CoreとEntityFrameworkでどのように効果的に動作するかを紹介する。 この記事のコードはすべて、こちらで見ることができる。 ","date":"2019-10-09","objectID":"/jp/2019/10/dotnet-tabulator-pagination-with-filtering-and-sorting/:0:0","tags":["ASP.NET","EntityFramework","Javascript"],"title":"ページネーション、フィルタリング、ソートを備えた動的テーブルを作成するためのタブレータを備えたASP.NET Core","uri":"/jp/2019/10/dotnet-tabulator-pagination-with-filtering-and-sorting/"},{"categories":["チュートリアル"],"content":"この例のモデル この例では、以下のモデルを持つデータベース・スキーマを使用します： public class Contact { [Key] public int Id { get; set; } public string FirstName { get; set; } public string LastName { get; set; } public int Age { get; set; } public string Gender { get; set; } public string Email { get; set; } public int ZipCode { get; set; } public string About { get; set; } } ","date":"2019-10-09","objectID":"/jp/2019/10/dotnet-tabulator-pagination-with-filtering-and-sorting/:1:0","tags":["ASP.NET","EntityFramework","Javascript"],"title":"ページネーション、フィルタリング、ソートを備えた動的テーブルを作成するためのタブレータを備えたASP.NET Core","uri":"/jp/2019/10/dotnet-tabulator-pagination-with-filtering-and-sorting/"},{"categories":["チュートリアル"],"content":"データベースコンテキストの構造 この例では、Startup.csファイルで依存性注入を使用したインメモリ・ストレージを使用します： public class TabulatorContext : DbContext { public DbSet\u003cContact\u003e Contacts { get; set; } public TabulatorContext (DbContextOptions\u003cTabulatorContext\u003e options) : base (options) { } public void EnsureSeedData (){} } ","date":"2019-10-09","objectID":"/jp/2019/10/dotnet-tabulator-pagination-with-filtering-and-sorting/:2:0","tags":["ASP.NET","EntityFramework","Javascript"],"title":"ページネーション、フィルタリング、ソートを備えた動的テーブルを作成するためのタブレータを備えたASP.NET Core","uri":"/jp/2019/10/dotnet-tabulator-pagination-with-filtering-and-sorting/"},{"categories":["チュートリアル"],"content":"リポジトリの構造 リポジトリを見る前にインストールする必要がある重要なパッケージの1つは、EntityFrameworkPaginateCoreです。これは、バックエンド側でフィルタリングとソートを行うために必要です。Dotnet CLIを使って、以下のコマンドでインストールできます： | dotnet add package EntityFrameworkPaginateCore –version 1.1.0 Github上のサンプル・プロジェクトには必要なパッケージがすべて含まれており、プロジェクトのREADMEの指示に従うだけです。 リポジトリ構造は、以下のメソッドシグネチャに依存しています： Task\u003cTabulatorViewModel\u003e GetFilteredData (int page, int size, List\u003cDictionary\u003cstring, string\u003e\u003e filters, List\u003cDictionary\u003cstring, string\u003e\u003e sorters) ここで重要なのは、「フィルター」と「ソーター」のパラメーターの種類である： List\u003cDictionary\u003cstring, string\u003e\u003e というのも、以下のような形式でフィルターを取得することになるからだ： [{field:\"age\", type:\"\u003e\", value:52}, {field:\"height\", type:\"\u003c\", value:142}] とソーター用： [{field: \"age\", dir: \"asc\"}] さらに重要なのは、Tabulatorにデータを戻すために使用するViewModelです： public class TabulatorViewModel { public IEnumerable\u003cdynamic\u003e Data { get; set; } public int Last_page { get; set; } } メソッドの全容はこちらで説明されており、ほとんどの場合、辞書項目のリストを反復処理し、ブログの冒頭で言及したモデルで説明した各カラムのフィールドと値を設定することで構成されている。 ","date":"2019-10-09","objectID":"/jp/2019/10/dotnet-tabulator-pagination-with-filtering-and-sorting/:3:0","tags":["ASP.NET","EntityFramework","Javascript"],"title":"ページネーション、フィルタリング、ソートを備えた動的テーブルを作成するためのタブレータを備えたASP.NET Core","uri":"/jp/2019/10/dotnet-tabulator-pagination-with-filtering-and-sorting/"},{"categories":["チュートリアル"],"content":"フロントエンド・タブレーター・コード var table = new Tabulator(\"#example-table\", { pagination: \"remote\", ajaxURL: baseUrl + apiEndpoint, paginationSize: 10, paginationSizeSelector: [10, 20, 30, 50], ajaxFiltering: true, ajaxSorting: true, columns: [ { title: \"FirstName\", field: \"firstName\", sorter: \"string\", headerFilter: \"input\" }, { title: \"LastName\", field: \"lastName\", sorter: \"string\", headerFilter: \"input\" }, { title: \"Age\", field: \"age\", sorter: \"number\", headerFilter: \"input\" }, { title: \"Gender\", field: \"gender\", sorter: \"string\", headerFilter: \"input\" }, { title: \"Email\", field: \"email\", sorter: \"string\", headerFilter: \"input\" }, { title: \"ZipCode\", field: \"zipCode\", sorter: \"number\", headerFilter: \"input\" }, { title: \"About\", field: \"about\", sorter: \"string\", headerFilter: \"input\", width: 500 } ] }); 上記の構造により、Ajaxを使ってデータにフィルタをかけたり、ページ分割したりすることができる。この構造でとても便利なのは、バックエンドを調整することなくフロントエンドからカラムを削除できることだ。しかし、フロントエンドに渡すオブジェクトには注意し、APIが何を返すか確認してください。データが漏れないようにする方法は、ViewModelsとAutoMapperを使うか、通常のオブジェクト合成を使って、関連するデータだけをフロントエンドに渡すことです。このブログでは、あまり多くの概念を紹介しないように、Repositoryメソッドの実装の中で、AutoMapper節が入る箇所をコメントアウトしておきました。最後に、Postmanのようなツールを使ってAPIを照会し、それが返すデータを見ることができる。 繰り返しますが、すべてのコードはこちらに、Tabulatorに関する完全なドキュメントはこちらにあります。 お楽しみください。バグや問題があれば、遠慮なく報告ください： GitHub issues :) ","date":"2019-10-09","objectID":"/jp/2019/10/dotnet-tabulator-pagination-with-filtering-and-sorting/:4:0","tags":["ASP.NET","EntityFramework","Javascript"],"title":"ページネーション、フィルタリング、ソートを備えた動的テーブルを作成するためのタブレータを備えたASP.NET Core","uri":"/jp/2019/10/dotnet-tabulator-pagination-with-filtering-and-sorting/"},{"categories":null,"content":"アレクサンダ　アガピトブと申します。ソフトウェア・エンジニア、アーティスト志望。 ソフトウェアエンジニアとして、主に.NETとReact.jsを使ってC#で書いています。また、Linuxサーバーをいくつか所有／管理しており、デプロイにはDockerを活用しています。また、Python、Go、Vue.jsを使ってプロジェクトを書いたこともあります。 職務経歴書をダウンロード このブラウザはPDFをサポートしていません。PDFをダウンロードしてご覧ください： PDFをダウンロード. ","date":"2019-08-02","objectID":"/jp/about/:0:0","tags":null,"title":"について","uri":"/jp/about/"}]